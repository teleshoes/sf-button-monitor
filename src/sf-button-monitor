#!/usr/bin/perl
use strict;
use warnings;
use IO::Select;
use Time::HiRes qw(time);

my $INPUT_DEV = "/dev/input/by-path/platform-gpio_keys.105-event";
my $CONFIG_FILE = "$ENV{HOME}/.config/sf-button-monitor.conf";

my $DEFAULT_CONFIG_CONTENTS = ''
  . "action=torch,vd vd,screenLocked\n"
  ;

my $PTRN_MAX_MILLIS = 350;
my $PTRN_ACCIDENTAL_DOUBLE_MILLIS = 10;

sub readButtonEvent($);
sub trimPattern(@);
sub removeAccidentalDoubleClicks(@);
sub parseConfigFileActions($);
sub sortActionsLongestFirst(@);
sub formatPattern(@);
sub condensePattern(@);
sub parsePatternString($);
sub checkAction($@);
sub checkCondition($);
sub getActionCommand($);
sub isScreenLocked();
sub allEq(@);
sub dbusSendCmd($$$@);
sub nowMillis();

my $usage = "Usage:
  Perform actions when Sailfish OS hardware buttons are pressed.

  Supports volume up/down and camera half/full keys,
    when screen is locked or unlocked.

  Can run arbitrary shell commands, or a few built-in commands.

  Works best with automatic display-on disabled (requires mcetool).
    Install mcetool and run the following,
    to prevent unlocking when camera/volume is pressed:
      mcetool --set-exception-length-volume=0
      mcetool --set-exception-length-camera=0

  $0 -h | --help
    display this message

  $0
    -listen to $INPUT_DEV
    -parse bytes into button press/release events
    -split sequences of events into patterns
    -read actions and patterns from $CONFIG_FILE
    -perform actions that match event patterns and system conditions


  actions are recorded in $CONFIG_FILE
    one per line, formatted like:
    action=ACTION,PTRN,CONDITION

  ACTION    = cmd(<CMD>) | torch
                action to perform
                  cmd:         run shell command <CMD>
                  torch:       toggle flashlight
  CMD       = <any-string>
                any shell command: EXEC ARG ARG...
  CONDITION = always | screenLocked | screenUnlocked
                when to allow the command to run
                  always: always
                  screenLocked: when display is off and screen is locked
                  screenUnlocked: when display is on and screen is unlocked

  BTN_PTRN  = <EVENT> | <EVENT> <BTN_PTRN>
               a full pattern string containing button press/releases
  EVENT     = <PRESS> | <RELEASE> | <CLICK> | <GROUP>
                a button press and/or release
  PRESS     = <BTN>-press
                pressing button named <BTN>
  RELEASE   = <BTN>-press
                releasing button named <BTN>
  CLICK     = <BTN>
                same as: <BTN>-press <BTN>-release
  GROUP     = <BTN>() | <BTN>( <BTN_PTRN> )
                same as: <BTN>-press <BTN_PTRN> <BTN>-release
  BTN       = vu | vd | ch | cf
                the name of a physical hardware button
                  vu: volume up
                  vd: volume down
                  ch: camera half
                  cf: camera full

  BTN_PTRN is a sequence of button presses/releases, with optional short synonyms
  e.g.:
     vd-press vd-release =>
         vd-press vd-release
     vd =>
         vd-press vd-release
     vd() =>
         vd-press vd-release
     vd vd =>
         vd-press vd-release vd-press vd-release
     vd(vu) =>
         vd-press vu-press vu-release vd-release
     ch(vd vd(vu vu()) cf) =>
         ch-press vd-press vd-release vd-press
         vu-press vu-release vu-press vu-release
         vd-release cf-press cf-release ch-release
";

my @BUTTONS = (
  [qw(115 VOL_UP   vu)],
  [qw(114 VOL_DOWN vd)],
  [qw(16  CAM_HALF ch)],
  [qw(254 CAM_FULL cf)],
);
my %OK_BUTTON_IDS = map {$$_[0] => 1} @BUTTONS;
my %BTN_NAMES = map {$$_[0] => $$_[1]} @BUTTONS;
my %BTN_SHORTNAMES = map {$$_[0] => $$_[2]} @BUTTONS;

my $TYPE_PRESS = "press";
my $TYPE_RELEASE = "release";

my %DBUS_ACTIONS = (
  torch      => dbusSendCmd('com.jolla.settings.system.flashlight', '/<DEST_OBJ>',
                  '<DEST>.toggleFlashlight'),
);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ > 0){
    die $usage;
  }

  #auto-flush stdout
  select(STDOUT);
  $| = 1;

  my @actions = parseConfigFileActions($CONFIG_FILE);
  @actions = sortActionsLongestFirst @actions;

  my $inputDevFH;
  my @pattern;
  my $lastButtonMillis = nowMillis();
  open $inputDevFH, "< $INPUT_DEV";

  my $select = IO::Select->new();
  $select->add($inputDevFH);

  while(1){
    my ($buttonId, $value) = readButtonEvent($inputDevFH);

    my $now = nowMillis();
    my $elapsedMillis = $now - $lastButtonMillis;
    $lastButtonMillis = $now;

    my $type = $value ? $TYPE_PRESS : $TYPE_RELEASE;

    my $event = {
      buttonId      => $buttonId,
      type          => $type,
      elapsedMillis => $elapsedMillis,
    };

    push @pattern, $event;
    @pattern = trimPattern @pattern;

    printf "EVENT: %8s => %-7s  %14dms  (%s)\n",
      $BTN_NAMES{$$event{buttonId}},
      $$event{type},
      $$event{elapsedMillis},
      formatPattern(@pattern),
      ;

    @pattern = removeAccidentalDoubleClicks(@pattern);

    for my $action(@actions){
      if(checkAction($action, @pattern) and checkCondition($$action{condition})){
        if(not $select->can_read($PTRN_MAX_MILLIS/1000.0)){
          my $command = getActionCommand $$action{action};
          print "RUNNING $command\n";
          system "$command &";
          @pattern = ();
        }
      }
    }
  }
}

#blocks until a valid button press/release event and then returns it
sub readButtonEvent($){
  my ($inputDevFH) = @_;
  my $byteStr;
  while(1){
    read $inputDevFH, $byteStr, 16;
    my @bytesDec = map {ord $_} split //, $byteStr;
    my $buttonId = $bytesDec[10];
    my $value = $bytesDec[12];
    if(defined $OK_BUTTON_IDS{$buttonId}){
      return ($buttonId, $value);
    }
  }
}

sub trimPattern(@){
  my (@pattern) = @_;
  my %states = map {$_ => 0} sort keys %OK_BUTTON_IDS;
  my $trimIndex = 0;
  for(my $i=0; $i<@pattern; $i++){
    my $event = $pattern[$i];
    my $btnId = $$event{buttonId};
    my @keysDown = grep {$states{$_}} sort keys %states;
    if(@keysDown == 0 and $$event{elapsedMillis} > $PTRN_MAX_MILLIS){
      $trimIndex = $i;
    }
    if($$event{type} eq $TYPE_PRESS){
      if($states{$btnId} == 1){
        print "    WARNING: press without release for $BTN_NAMES{$btnId}\n";
        $trimIndex = $i+1;
      }
      $states{$$event{buttonId}} = 1;
    }elsif($$event{type} eq $TYPE_RELEASE){
      if($states{$btnId} == 0){
        print "    WARNING: release without press for $BTN_NAMES{$btnId}\n";
        $trimIndex = $i+1;
      }
      $states{$$event{buttonId}} = 0;
    }
  }

  if($trimIndex >= @pattern){
    @pattern = ();
  }elsif($trimIndex > 0){
    @pattern = @pattern[$trimIndex..$#pattern];
  }

  return @pattern;
}

sub removeAccidentalDoubleClicks(@){
  my @pattern = @_;
  my %dupeIndexes;
  for(my $i=0; $i<@pattern; $i++){
    last if $i > @pattern - 3;
    my $initPress = $pattern[$i];
    my $initRelease = $pattern[$i+1];
    my $dupePress = $pattern[$i+2];

    next if $$initPress{type} ne $TYPE_PRESS;
    next if $$initRelease{type} ne $TYPE_RELEASE;
    next if $$dupePress{type} ne $TYPE_PRESS;

    my @events = ($initPress, $initRelease, $dupePress);
    my @buttonIds = map {$$_{buttonId}} @events;
    next if not allEq(@buttonIds);

    next if $$initRelease{elapsedMillis} > $PTRN_ACCIDENTAL_DOUBLE_MILLIS;
    next if $$dupePress{elapsedMillis} > $PTRN_ACCIDENTAL_DOUBLE_MILLIS;

    $dupeIndexes{$i+1} = 1; #skip the initial release
    $dupeIndexes{$i+2} = 1; #skip the extra press
  }

  my $dupeIndexCount = keys %dupeIndexes;
  if($dupeIndexCount > 0){
    my @newPattern;
    for(my $i=0; $i<@pattern; $i++){
      if(not defined $dupeIndexes{$i}){
        push @newPattern, $pattern[$i];
      }
    }
    printf "    FALSE DBL CLICK: %s => %s\n",
      formatPattern(@pattern),
      formatPattern(@newPattern),
      ;
    @pattern = @newPattern;
  }

  return @pattern;
}

sub parseConfigFileActions($){
  my ($file) = @_;
  my $contents;
  if(not -f $file){
    $contents = $DEFAULT_CONFIG_CONTENTS;
  }else{
    open FH, "< $file" or die "could not read $file\n$!\n";
    $contents = join '', <FH>;
    close FH;
  }

  my $dbusActionRe = join '|', sort keys %DBUS_ACTIONS;

  my $actionRe = "(?:cmd\\(.*\\)|$dbusActionRe)";

  my @actions;

  my @lines = split /[\n\r]+/, $contents;
  for my $line(@lines){
    if($line =~ /^\s*action\s*=\s*($actionRe),([^,]+),(\w+)$/){
      my ($action, $patternString, $condition) = ($1, $2, $3);
      my @pattern = parsePatternString($patternString);
      push @actions, {
        action => $action,
        pattern => [@pattern],
        condition => $condition,
      };
      if($condition !~ /^(always|screenLocked|screenUnlocked)$/i){
        die "invalid condition: $condition\n";
      }
    }
  }

  return @actions;
}

sub sortActionsLongestFirst(@){
  my @actions = @_;
  return sort {
    my $ptrnLenA = @{$$a{pattern}};
    my $ptrnLenB = @{$$b{pattern}};
    my $actionA = $$a{action};
    my $actionB = $$b{action};
    my $conditionA = $$a{condition};
    my $conditionB = $$b{condition};

    return 0
      || $ptrnLenB <=> $ptrnLenA
      || $actionA cmp $actionB
      || $conditionA cmp $conditionB
      ;
  } @actions;
}

sub formatPattern(@){
  return join(" ", condensePattern(@_));
}

sub condensePattern(@){
  my @pattern = @_;
  return () if @pattern == 0;
  my $event = shift @pattern;
  my $btnShortName = $BTN_SHORTNAMES{$$event{buttonId}};
  if($$event{type} eq $TYPE_PRESS){
    for(my $i=0; $i<@pattern; $i++){
      my $btnRelEvent = $pattern[$i];
      next if $$btnRelEvent{buttonId} != $$event{buttonId};
      next if $$btnRelEvent{type} ne $TYPE_RELEASE;

      my @group = @pattern[0..$i-1];
      @pattern = @pattern[$i+1..$#pattern];

      if(@group > 0){
        return ("$btnShortName(", condensePattern(@group), ")", condensePattern(@pattern));
      }else{
        return ("$btnShortName", condensePattern(@pattern));
      }
    }
    return ("$btnShortName-press");
  }elsif($$event{type} eq $TYPE_RELEASE){
    return ("$btnShortName-release", condensePattern(@pattern));
  }else{
    die "INVALID EVENT TYPE: $$event{type}\n";
  }
}

sub parsePatternString($){
  my ($patternString) = @_;

  my $btnRe = "(?:" . join("|", values %BTN_SHORTNAMES) . ")";
  my $eventRe = "(?:$btnRe(?:-press|-release)?)";

  $patternString = lc $patternString;

  if($patternString =~ /^\s*$/){
    return ();
  }elsif($patternString =~ /^\s*($eventRe)(?:\s+|$)(.*)$/){
    my ($event, $ptrn) = ($1, $2);
    if($event =~ /^$btnRe$/){
      return ("$event-press", "$event-release", parsePatternString($ptrn));
    }else{
      return ("$event", parsePatternString($ptrn));
    }
  }elsif($patternString =~ /^\s*($btnRe)\s*\((.*)$/){
    my ($btnName, $ptrn) = ($1, $2);
    my $len = length $ptrn;
    my $parensCount = 1;
    my $closeParensIndex = undef;
    for(my $i=0; $i<$len; $i++){
      my $c = substr $ptrn, $i, 1;
      if($c eq "("){
        $parensCount++;
      }elsif($c eq ")"){
        $parensCount--;
        if($parensCount == 0){
          $closeParensIndex = $i;
          last;
        }
      }
    }
    if(not defined $closeParensIndex){
      die "unmatched open-parens: $patternString\n";
    }
    my $group = substr $ptrn, 0, $closeParensIndex;
    my $suffix = substr $ptrn, $closeParensIndex+1;

    return (
      "$btnName-press",
      parsePatternString($group),
      "$btnName-release",
      parsePatternString($suffix),
    );
  }else{
    die "invalid pattern: $patternString\n";
  }
}

sub checkAction($@){
  my ($action, @pattern) = @_;

  my @actionPtrn = @{$$action{pattern}};
  my $actionPtrnRe = join ".*", @actionPtrn;

  my $patternStr = join " ", map {
    "$BTN_SHORTNAMES{$$_{buttonId}}-$$_{type}"
  } @pattern;

  if($patternStr =~ /$actionPtrnRe/){
    return 1;
  }else{
    return 0;
  }
}

sub checkCondition($){
  my ($condition) = @_;

  if($condition =~ /always/i){
    return 1;
  }elsif($condition =~ /screenLocked/i){
    return isScreenLocked() ? 1 :0;
  }elsif($condition =~ /screenUnlocked/i){
    return isScreenLocked() ? 0 : 1;
  }else{
    die "ERROR: invalid condition $condition\n";
  }
}

sub getActionCommand($){
  my ($actionStr) = @_;
  if(defined $DBUS_ACTIONS{$actionStr}){
    return $DBUS_ACTIONS{$actionStr};
  }elsif($actionStr =~ /^cmd\((.*)\)$/){
    return $1;
  }else{
    die "invalid action: $actionStr\n";
  }
}

sub isScreenLocked(){
  my @cmd = qw(
    dbus-send
      --system
      --dest=com.nokia.mce
      --print-reply
      --type=method_call
      /com/nokia/mce/request
      com.nokia.mce.request.get_display_status
  );
  print "@cmd\n";
  open CMD, "-|", @cmd or die "could not run @cmd\n$!\n";
  my $out = join '', <CMD>;
  close CMD;

  my $status = "";
  if($out =~ /^method.*\n\s*string\s*['"](on|off)['"]\s*$/){
    $status = $1;
  }

  if($status eq "on"){
    return 0;
  }elsif($status eq "off"){
    return 1;
  }else{
    print STDERR "could not read display status with @cmd\n";
    return 0;
  }
}

sub allEq(@){
  for my $elem(@_){
    my $first = $_[0];
    if($first ne $elem){
      return 0;
    }
  }
  return 1;
}

#dbusSendCmd(DEST, OBJECT_PATH, FUNCTION, ARG, ARG ...)
#generate the following command:
#  dbus-send --print-reply --dest=DEST OBJECT_PATH FUNCTION ARG ARG ...
#replace variables in that command as follows:
#  <DEST>     => DEST
#  <DEST_OBJ> => DEST with all '.'s replace with '/'s
sub dbusSendCmd($$$@){
  my ($dest, $objectPath, $function, @args) = @_;
  my $destObj = $dest;
  $destObj =~ s/\./\//g;
  my $millis = nowMillis();
  my $cmd = "dbus-send --print-reply --dest=$dest $objectPath $function @args";
  $cmd =~ s/<DEST_OBJ>/$destObj/g;
  $cmd =~ s/<DEST>/$dest/g;
  $cmd =~ s/<MILLIS>/$millis/g;
  return $cmd;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
